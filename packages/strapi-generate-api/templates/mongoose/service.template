'use strict';

/* global <%= globalID %> */

/**
 * <%= filename %> service
 *
 * @description: A set of functions similar to controller's actions to avoid code duplication.
 */

// Public dependencies.
const _ = require('lodash');
const { convertRestQueryParams, buildQuery } = require('strapi-utils');

module.exports = {

  /**
   * Promise to fetch all <%= humanizeIdPluralized %>.
   *
   * @return {Promise}
   */

  fetchAll: (params, populate) => {
    const filters = convertRestQueryParams(params);
    const populateOpt = populate || <%= globalID %>.associations
      .filter(ast => ast.autoPopulate !== false)
      .map(ast => ast.alias)

    return buildQuery({
      model: <%= globalID %>,
      filters,
      populate: populateOpt,
    });
  },

  /**
   * Promise to fetch a/an <%= id %>.
   *
   * @return {Promise}
   */

  fetch: (params) => {
    // Select field to populate.
    const populate = <%= globalID %>.associations
      .filter(ast => ast.autoPopulate !== false)
      .map(ast => ast.alias)
      .join(' ');

    return <%= globalID %>
      .findOne(_.pick(params, _.keys(<%= globalID %>.schema.paths)))
      .populate(populate);
  },

  /**
   * Promise to count <%= humanizeIdPluralized %>.
   * @param {Object} params - rest params for the query
   * @param {Boolean} limited - optional, to limit the count result
   * @return {Promise}
   */

  count: (params, limited = false) => {
    const filters = convertRestQueryParams(params);

    // Set query options
    const queryOptions = {
      model: <%= globalID %>,
      filters: { where: filters.where },
    };

    // Limit the result if needed (e.g. for GraphQL count aggregator)
    if (limited) {
      queryOptions.filters.limit = filters.limit;
      queryOptions.filters.start = filters.start;
    }

    return buildQuery(queryOptions)
      .count()
  },

  /**
   * Promise to add a/an <%= id %>.
   *
   * @return {Promise}
   */

  add: async (values) => {
    // Extract values related to relational data.
    const relations = _.pick(values, <%= globalID %>.associations.map(ast => ast.alias));
    const data = _.omit(values, <%= globalID %>.associations.map(ast => ast.alias));

    // Create entry with no-relational data.
    const entry = await <%= globalID %>.create(data);

    // Create relational data and return the entry.
    return <%= globalID %>.updateRelations({ _id: entry.id, values: relations });
  },

  /**
   * Promise to edit a/an <%= id %>.
   *
   * @return {Promise}
   */

  edit: async (params, values) => {
    // Extract values related to relational data.
    const relations = _.pick(values, <%= globalID %>.associations.map(a => a.alias));
    const data = _.omit(values, <%= globalID %>.associations.map(a => a.alias));

    // Update entry with no-relational data.
    const entry = await <%= globalID %>.updateOne(params, data, { multi: true });

    // Update relational data and return the entry.
    return <%= globalID %>.updateRelations(Object.assign(params, { values: relations }));
  },

  /**
   * Promise to remove a/an <%= id %>.
   *
   * @return {Promise}
   */

  remove: async params => {
    // Select field to populate.
    const populate = <%= globalID %>.associations
      .filter(ast => ast.autoPopulate !== false)
      .map(ast => ast.alias)
      .join(' ');

    // Note: To get the full response of Mongo, use the `remove()` method
    // or add spent the parameter `{ passRawResult: true }` as second argument.
    const data = await <%= globalID %>
      .findOneAndRemove(params, {})
      .populate(populate);

    if (!data) {
      return data;
    }

    await Promise.all(
      <%= globalID %>.associations.map(async association => {
        if (!association.via || !data._id || association.dominant) {
          return true;
        }

        const search = _.endsWith(association.nature, 'One') || association.nature === 'oneToMany' ? { [association.via]: data._id } : { [association.via]: { $in: [data._id] } };
        const update = _.endsWith(association.nature, 'One') || association.nature === 'oneToMany' ? { [association.via]: null } : { $pull: { [association.via]: data._id } };

        // Retrieve model.
        const model = association.plugin ?
          strapi.plugins[association.plugin].models[association.model || association.collection] :
          strapi.models[association.model || association.collection];

        return model.update(search, update, { multi: true });
      })
    );

    return data;
  },

    /**
     * DEPRECATED - for compatibility reasons only, use fetchAll instead, that handles the _q search parameter now
     *
     * Promise to search a/an <%= id %>.
     *
     * @return {Promise}
     */

    search: async (params) => {
      // Select field to populate.
      const populate = <%= globalID %>.associations
        .filter(ast => ast.autoPopulate !== false)
        .map(ast => ast.alias)

      // Call fetchAll
      return module.exports.fetchAll(params, populate);
    }
};

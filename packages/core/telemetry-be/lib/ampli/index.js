/* tslint:disable */
/* eslint-disable */
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull strapi-backend'
 *
 * Required dependencies: @amplitude/node@^1.10.0
 * Tracking Plan Version: 14
 * Build: 1.0.0
 * Runtime: node.js:javascript-ampli
 *
 * [View Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/strapi/Default%20Workspace/implementation/strapi-backend)
 */

const { Identify: AmplitudeIdentify, IdentifyEvent } = require('@amplitude/identify');
const { init: initNodeClient, NodeClient, Status, Options } = require('@amplitude/node');

/**
 * @typedef {Object} BaseEvent
 * @property {string} event_type
 * @property {Object.<string, *>} [event_properties]
 */

/**
 * @typedef LoadClientOptions
 * @type {object}
 * @property {string} [apiKey]
 * @property {Options} [options]
 * @property {NodeClient} [instance]
 */

/**
 * @typedef LoadOptions
 * @type {object}
 * @property {'development'|'production'} [environment]
 * @property {boolean} [disabled]
 * @property {LoadClientOptions} [client]
 */

/**
 * @typedef {Object} EventOptions
 * @type {object}
 */

/**
 * @typedef {Object} IdentifyOptions
 * @type {object}
 */

/**
 * @typedef {Object} GroupOptions
 * @type {object}
 */

/**
 * @typedef {Object} MiddlewareExtra
 * @type {Object.<string, *>}
 */

/**
 * @typedef ApiKey
 * @type {object}
 * @property {string} development
 * @property {string} production
 */
const ApiKey = {
  development: '07575947bab909036726f8e877214d43',
  production: 'a7dcd72e3c50082622ed7efa3db65dd7',
};

/**
 * @typedef {Object} GeneratorsScope
 * @param {*} scope Property has no description in tracking plan.
 */

/**
 * @typedef {Object} PackagesCoreStrapiGroup
 * @param {string} diveceId Property has no description in tracking plan.
 * @param {string} uuid Property has no description in tracking plan.
 */

/**
 * Default NodeClient Options. Contains tracking plan information.
 */
const DefaultOptions = {
  plan: {
    version: '14',
    branch: 'main',
    source: 'strapi-backend',
    versionId: 'f11ec09a-74dd-4c24-9d91-29505a2583e1',
  },
};

class Identify {
  constructor() {
    this.event_type = 'Identify';
  }
}

class Group {
  constructor() {
    this.event_type = 'Group';
  }
}

class DidAccessAuthenticatedAdministration {
  constructor() {
    this.event_type = 'didAccessAuthenticatedAdministration';
  }
}

class DidChangeInterfaceLanguage {
  constructor() {
    this.event_type = 'didChangeInterfaceLanguage';
  }
}

class DidConfigureListView {
  constructor(properties) {
    this.event_type = 'didConfigureListView';
    this.event_properties = properties;
  }
}

class DidCreateComponent {
  constructor(properties) {
    this.event_type = 'didCreateComponent';
    this.event_properties = properties;
  }
}

class DidCreateContentType {
  constructor(properties) {
    this.event_type = 'didCreateContentType';
    this.event_properties = properties;
  }
}

class DidCreateFirstAdmin {
  constructor(properties) {
    this.event_type = 'didCreateFirstAdmin';
    this.event_properties = properties;
  }
}

class DidCreateFirstComponent {
  constructor(properties) {
    this.event_type = 'didCreateFirstComponent';
    this.event_properties = properties;
  }
}

class DidCreateFirstContentType {
  constructor(properties) {
    this.event_type = 'didCreateFirstContentType';
    this.event_properties = properties;
  }
}

class DidCreateFirstContentTypeEntry {
  constructor(properties) {
    this.event_type = 'didCreateFirstContentTypeEntry';
    this.event_properties = properties;
  }
}

class DidDisableResponsiveDimensions {
  constructor(properties) {
    this.event_type = 'didDisableResponsiveDimensions';
    this.event_properties = properties;
  }
}

class DidEnableResponsiveDimensions {
  constructor(properties) {
    this.event_type = 'didEnableResponsiveDimensions';
    this.event_properties = properties;
  }
}

class DidInitializeI18N {
  constructor(properties) {
    this.event_type = 'didInitializeI18n';
    this.event_properties = properties;
  }
}

class DidInviteUser {
  constructor(properties) {
    this.event_type = 'didInviteUser';
    this.event_properties = properties;
  }
}

class DidNotCreateContentType {
  constructor(properties) {
    this.event_type = 'didNotCreateContentType';
    this.event_properties = properties;
  }
}

class DidNotOpenTab {
  constructor() {
    this.event_type = 'didNotOpenTab';
  }
}

class DidOpenTab {
  constructor() {
    this.event_type = 'didOpenTab';
  }
}

class DidSaveMediaWithAlternativeText {
  constructor(properties) {
    this.event_type = 'didSaveMediaWithAlternativeText';
    this.event_properties = properties;
  }
}

class DidSaveMediaWithCaption {
  constructor(properties) {
    this.event_type = 'didSaveMediaWithCaption';
    this.event_properties = properties;
  }
}

class DidStartServer {
  constructor(properties) {
    this.event_type = 'didStartServer';
    this.event_properties = properties;
  }
}

class DidUpdateI18NLocales {
  constructor(properties) {
    this.event_type = 'didUpdateI18nLocales';
    this.event_properties = properties;
  }
}

class DidUpdateRolePermissions {
  constructor(properties) {
    this.event_type = 'didUpdateRolePermissions';
    this.event_properties = properties;
  }
}

class WillCreateProject {
  constructor(properties) {
    this.event_type = 'willCreateProject';
    this.event_properties = properties;
  }
}

const getDefaultPromiseResponse = () =>
  Promise.resolve <
  Response >
  {
    status: Status.Skipped,
    statusCode: 200,
  };

/**
 * getIdentifyEvent
 * @param {AmplitudeIdentify} amplitudeIdentify
 * @param {string} [userId]
 * @param {string} [deviceId]
 * @return {IdentifyEvent}
 */
function getIdentifyEvent(amplitudeIdentify, userId, deviceId) {
  const identifyEvent = amplitudeIdentify.identifyUser('tmp-user-id-to-pass-validation');
  identifyEvent.user_id = userId;
  identifyEvent.device_id = deviceId;

  return identifyEvent;
}

// prettier-ignore
class Ampli {
  constructor() {
    /* @type {NodeClient|undefined} */
    this.amplitude = undefined;
    this.disabled = false;
  }

  /**
   * @return {NodeClient}
   */
  get client() {
    this.isInitializedAndEnabled();
    return this.amplitude;
  }

  /**
   * @return {boolean}
   */
  get isLoaded() {
    return this.amplitude != null;
  }

  /**
   * @private
   * @return {boolean}
   */
  isInitializedAndEnabled() {
    if (!this.isLoaded) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   * @param {LoadOptions} [options] Configuration options to initialize the Ampli SDK with.
   */
  load(options) {
    this.disabled = options?.disabled ?? false;

    if (this.isLoaded) {
      console.warn('WARNING: Ampli is already initialized. Ampli.load() should be called once at application startup.');
      return;
    }

    const env = options?.environment ?? 'development';
    const apiKey = options?.client?.apiKey || ApiKey[env];
    if (options?.client?.instance) {
      this.amplitude = options?.client?.instance;
    } else if (apiKey) {
      this.amplitude = initNodeClient(apiKey, { ...DefaultOptions, ...options?.client?.options });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }
  }

  /**
   * Identify a user.
   *
   * @param {string|undefined} userId The user's ID.
   * @param {IdentifyOptions} [options] Options for this identify call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  identify(userId, options, extra) {
    const identify = new AmplitudeIdentify();
    const identifyEvent = getIdentifyEvent(identify, userId || options?.user_id, options?.device_id);
    const promise = this.isInitializedAndEnabled()
      ? this.amplitude?.logEvent({ ...options, ...identifyEvent }, extra)
      : getDefaultPromiseResponse();

    return { promise };
  }

  /**
   * Set Group name and value
   *
   * @param {string|undefined} userId The user's Id
   * @param {string} name
   * @param {string} value
   * @param {GroupOptions} [options]
   * @param {MiddlewareExtra} [extra]
   *
   * @return {{promise: Promise<Response>}}
   */
  setGroup(userId, name, value, options, extra) {
    const identify = new AmplitudeIdentify().setGroup(name, value);
    const identifyEvent = getIdentifyEvent(identify, userId || options?.user_id, options?.device_id);
    const promise = this.isInitializedAndEnabled()
      ? this.amplitude.logEvent({ ...options, ...identifyEvent }, extra)
      : getDefaultPromiseResponse();

    return { promise };
  }

  /**
   * Identify a group.
   *
   * @param {string} groupType The group type.
   * @param {string} groupName The group name.
   * @param {GroupOptions} [options] Options for this groupIdentify call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  groupIdentify(groupType, groupName, options, extra) {
    const identify = new AmplitudeIdentify();
    const groupIdentifyEvent = identify.identifyGroup(groupType, groupName);
    const promise = this.isInitializedAndEnabled()
      ? this.amplitude?.logEvent({ ...options, ...groupIdentifyEvent }, extra)
      : getDefaultPromiseResponse();

    return { promise };
  }

  /**
   * didAccessAuthenticatedAdministration
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didAccessAuthenticatedAdministration)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didAccessAuthenticatedAdministration(userId, options, extra) {
    return this.track(userId, new DidAccessAuthenticatedAdministration(), options, extra);
  }

  /**
   * didChangeInterfaceLanguage
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didChangeInterfaceLanguage)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didChangeInterfaceLanguage(userId, options, extra) {
    return this.track(userId, new DidChangeInterfaceLanguage(), options, extra);
  }

  /**
   * didConfigureListView
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didConfigureListView)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didConfigureListView(userId, properties, options, extra) {
    return this.track(userId, new DidConfigureListView(properties), options, extra);
  }

  /**
   * didCreateComponent
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didCreateComponent)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didCreateComponent(userId, properties, options, extra) {
    return this.track(userId, new DidCreateComponent(properties), options, extra);
  }

  /**
   * didCreateContentType
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didCreateContentType)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didCreateContentType(userId, properties, options, extra) {
    return this.track(userId, new DidCreateContentType(properties), options, extra);
  }

  /**
   * didCreateFirstAdmin
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didCreateFirstAdmin)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didCreateFirstAdmin(userId, properties, options, extra) {
    return this.track(userId, new DidCreateFirstAdmin(properties), options, extra);
  }

  /**
   * didCreateFirstComponent
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didCreateFirstComponent)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didCreateFirstComponent(userId, properties, options, extra) {
    return this.track(userId, new DidCreateFirstComponent(properties), options, extra);
  }

  /**
   * didCreateFirstContentType
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didCreateFirstContentType)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didCreateFirstContentType(userId, properties, options, extra) {
    return this.track(userId, new DidCreateFirstContentType(properties), options, extra);
  }

  /**
   * didCreateFirstContentTypeEntry
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didCreateFirstContentTypeEntry)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didCreateFirstContentTypeEntry(userId, properties, options, extra) {
    return this.track(userId, new DidCreateFirstContentTypeEntry(properties), options, extra);
  }

  /**
   * didDisableResponsiveDimensions
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didDisableResponsiveDimensions)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didDisableResponsiveDimensions(userId, properties, options, extra) {
    return this.track(userId, new DidDisableResponsiveDimensions(properties), options, extra);
  }

  /**
   * didEnableResponsiveDimensions
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didEnableResponsiveDimensions)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didEnableResponsiveDimensions(userId, properties, options, extra) {
    return this.track(userId, new DidEnableResponsiveDimensions(properties), options, extra);
  }

  /**
   * didInitializeI18n
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didInitializeI18n)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didInitializeI18N(userId, properties, options, extra) {
    return this.track(userId, new DidInitializeI18N(properties), options, extra);
  }

  /**
   * didInviteUser
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didInviteUser)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didInviteUser(userId, properties, options, extra) {
    return this.track(userId, new DidInviteUser(properties), options, extra);
  }

  /**
   * didNotCreateContentType
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didNotCreateContentType)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didNotCreateContentType(userId, properties, options, extra) {
    return this.track(userId, new DidNotCreateContentType(properties), options, extra);
  }

  /**
   * didNotOpenTab
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didNotOpenTab)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didNotOpenTab(userId, options, extra) {
    return this.track(userId, new DidNotOpenTab(), options, extra);
  }

  /**
   * didOpenTab
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didOpenTab)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didOpenTab(userId, options, extra) {
    return this.track(userId, new DidOpenTab(), options, extra);
  }

  /**
   * didSaveMediaWithAlternativeText
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didSaveMediaWithAlternativeText)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didSaveMediaWithAlternativeText(userId, properties, options, extra) {
    return this.track(userId, new DidSaveMediaWithAlternativeText(properties), options, extra);
  }

  /**
   * didSaveMediaWithCaption
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didSaveMediaWithCaption)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didSaveMediaWithCaption(userId, properties, options, extra) {
    return this.track(userId, new DidSaveMediaWithCaption(properties), options, extra);
  }

  /**
   * didStartServer
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didStartServer)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didStartServer(userId, properties, options, extra) {
    return this.track(userId, new DidStartServer(properties), options, extra);
  }

  /**
   * didUpdateI18nLocales
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didUpdateI18nLocales)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didUpdateI18NLocales(userId, properties, options, extra) {
    return this.track(userId, new DidUpdateI18NLocales(properties), options, extra);
  }

  /**
   * didUpdateRolePermissions
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/didUpdateRolePermissions)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {string} properties.diveceId Property has no description in tracking plan.
   * @param {string} properties.uuid Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  didUpdateRolePermissions(userId, properties, options, extra) {
    return this.track(userId, new DidUpdateRolePermissions(properties), options, extra);
  }

  /**
   * willCreateProject
   *
   * [View in Tracking Plan](https://data.amplitude.com/strapi/Default%20Workspace/events/main/latest/willCreateProject)
   *
   * Owner: Ivan Sevcenko
   *
   * @param {string} userId The user's ID.
   * @param {Object} properties The event's properties.
   * @param {*} properties.scope Property has no description in tracking plan.
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  willCreateProject(userId, properties, options, extra) {
    return this.track(userId, new WillCreateProject(properties), options, extra);
  }

  /**
   * Track any event.
   * @param {string|undefined} userId The user's ID.
   * @param {BaseEvent} event The event.
   * @param {EventOptions} [options] Amplitude event options.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<Response>}}
   */
  track(userId, event, options, extra) {
    const promise = this.isInitializedAndEnabled()
      ? this.amplitude.logEvent({ ...options, ...event,  user_id: userId }, extra)
      : getDefaultPromiseResponse();

    return { promise };
  }

  /**
   * Flush pending events in queue
   *
   * @return {{promise: Promise<Response>}}
   */
  flush() {
    const promise = this.isInitializedAndEnabled()
      ? this.amplitude.flush()
      : getDefaultPromiseResponse();

    return { promise };
  }
}

module.exports.Ampli = Ampli;
module.exports.ApiKey = ApiKey;
module.exports.DefaultOptions = DefaultOptions;
module.exports.DidAccessAuthenticatedAdministration = DidAccessAuthenticatedAdministration;
module.exports.DidChangeInterfaceLanguage = DidChangeInterfaceLanguage;
module.exports.DidConfigureListView = DidConfigureListView;
module.exports.DidCreateComponent = DidCreateComponent;
module.exports.DidCreateContentType = DidCreateContentType;
module.exports.DidCreateFirstAdmin = DidCreateFirstAdmin;
module.exports.DidCreateFirstComponent = DidCreateFirstComponent;
module.exports.DidCreateFirstContentType = DidCreateFirstContentType;
module.exports.DidCreateFirstContentTypeEntry = DidCreateFirstContentTypeEntry;
module.exports.DidDisableResponsiveDimensions = DidDisableResponsiveDimensions;
module.exports.DidEnableResponsiveDimensions = DidEnableResponsiveDimensions;
module.exports.DidInitializeI18N = DidInitializeI18N;
module.exports.DidInviteUser = DidInviteUser;
module.exports.DidNotCreateContentType = DidNotCreateContentType;
module.exports.DidNotOpenTab = DidNotOpenTab;
module.exports.DidOpenTab = DidOpenTab;
module.exports.DidSaveMediaWithAlternativeText = DidSaveMediaWithAlternativeText;
module.exports.DidSaveMediaWithCaption = DidSaveMediaWithCaption;
module.exports.DidStartServer = DidStartServer;
module.exports.DidUpdateI18NLocales = DidUpdateI18NLocales;
module.exports.DidUpdateRolePermissions = DidUpdateRolePermissions;
module.exports.WillCreateProject = WillCreateProject;
module.exports.ampli = new Ampli();

on: workflow_dispatch

name: Manual Deployment to Prod
env:
  ECR_REPOSITORY: tourly-cms-prod
  IMAGE_TAG: ${{ github.sha }}
  AWS_REGION: eu-west-1
  CONTAINER_NAME: tourly-cms-prod
  SERVICE: tourly-cms-prod-service
  CLUSTER: tourly-cms-prod-cluster
  TASK_DEFINITION: tourly-cms-prod-task-definition

jobs:
  deploy:
    name: "Deploy Tourly-CMS to our ECS Cluster"
    runs-on: ubuntu-latest
    environment: production
    
    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR registry name
        id: get-registry
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Login to Amazon ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ steps.get-registry.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
      - name: Build docker image and push it to ECR
        id: build-and-push-image
        uses: docker/build-push-action@v2
        with:
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          tags: |
            ${{ steps.get-registry.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          build-args: |
            REACT_APP_GITHUB_SHA=${{ github.sha }}
            REACT_APP_ENV=${{ secrets.REACT_APP_ENV }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            PORT=${{ secrets.PORT }}

      - name: Move Dockers cache (Temp Fix to avoid cache growing exponentially)
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > ${{ env.TASK_DEFINITION }}.json
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION }}.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.get-registry.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE }}
          cluster: ${{ env.CLUSTER }}
          wait-for-service-stability: false
